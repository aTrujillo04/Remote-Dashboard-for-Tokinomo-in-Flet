from flask import Flask, request, jsonify
import RPi.GPIO as GPIO
import subprocess
import os
import threading
import time

app = Flask(__name__)

PIN_LUZ = 22
PIN_MOTOR_1A = 12
PIN_MOTOR_2A = 18
PIN_PIR = 25

GPIO.setmode(GPIO.BCM) 
GPIO.setup(4,GPIO.OUT) 	#Enable
GPIO.output(4,GPIO.HIGH) #Enable always on
GPIO.setup(PIN_LUZ,GPIO.OUT) #Ilumination
GPIO.setup(PIN_MOTOR_1A,GPIO.OUT) #Motor
GPIO.setup(PIN_MOTOR_2A,GPIO.OUT) #Motor
GPIO.setup(PIN_PIR,GPIO.IN) #Sensor


#PWM Motor
FREQ_PWM = 1000
pwm_motor_1A = GPIO.PWM(PIN_MOTOR_1A, FREQ_PWM)
pwm_motor_2A = GPIO.PWM(PIN_MOTOR_2A, FREQ_PWM)
pwm_motor_1A.start(0)
pwm_motor_2A.start(0)

SONIDO_PATH = os.path.join(os.path.dirname(__file__), "ZWAN.mp3")

active_routine= False

def wait_pir():
    global active_routine
    print("Active routine, waiting for detection")
    while active_routine:
        if GPIO.input(PIN_PIR) == GPIO.HIGH:
            print("PIR detected movement, executing routine")
            #Executing ilumination, sound and motor
            GPIO.output(PIN_LUZ, GPIO.HIGH)
            pwm_motor_1A.ChangeDutyCycle(70)
            pwm_motor_2A.ChangeDutyCycle(70)
            subprocess.Popen(["mpg123" , "-q", "--loop", "-1", SONIDO_PATH],
                             stdout=subprocess.DEVNULL,
                             stderr=subprocess.DEVNULL)
            break #Execute once during detection
        time.sleep(0.1)

#General control
@app.route("/control", methods=["POST"])
def control():
    global active_routine
    data = request.json
    gadget = data.get("gadget")
    action = data.get("action") #on/off
    
    if action not in ["on" , "off"]:
        return jsonify({"status" : "error" , "message" : "Invalid Action"}), 400
    
    #Ilumination
    if gadget == "ilumination":
        GPIO.output(PIN_LUZ, GPIO.HIGH if action == "on" else GPIO.LOW)
        return jsonify({"status" : "ok" , "gadget" : "ilumination", "action" : action})
    
    #Motor
    if gadget == "motor":
        if action == "on":
            pwm_motor_1A.ChangeDutyCycle(1)
            pwm_motor_2A.ChangeDutyCycle(1)
        else:
            pwm_motor_1A.ChangeDutyCycle(0)
            pwm_motor_2A.ChangeDutyCycle(0)
        return jsonify({"status" : "ok" , "gadget" : "motor" , "action" : action})
    
    #Sound
    if gadget == "sound":
        if action == "on":
            subprocess.Popen(["mpg123", "-q", "--loop","-1", SONIDO_PATH],
                             stdout=subprocess.DEVNULL,
                             stderr=subprocess.DEVNULL)
        else:
            subprocess.run(["pkill" , "mpg123"])
        return jsonify({"status" : "ok" , "gadget" : "sound" ,  "action" : action})
    
    #Complete routine
    if gadget == "routine":
        if action == "on":
            if not active_routine:
                active_routine = True
                #Initialize thread that waits PIR detection
                threading.Thread(target=wait_pir, daemon= True).start()
            return jsonify({"status" : "ok" , "gadget" : "routine" , "action" : "on"})
        else:
            #Off routine
            active_routine = False
            GPIO.output(PIN_LUZ, GPIO.LOW)
            pwm_motor_1A.ChangeDutyCycle(0)
            pwm_motor_2A.ChangeDutyCycle(0)
            subprocess.run(["pkill" , "mpg123"])
        return jsonify({"status" : "ok" , "gadget" : "routine" , "action" : "off"})
    
    return jsonify({"status" : "error" , "message" : "Invalid action"}), 400

#Slide configuration
@app.route("/pwm", methods= ["POST"])
def pwm_control():
    data = request.json
    value = data.get("value")
    try:
        valuep = int(value)
        if 0 <= valuep <= 100:
            pwm_motor_1A.ChangeDutyCycle(valuep)
            pwm_motor_2A.ChangeDutyCycle(valuep)
            return jsonify ({"status" : "ok" , "pwm" : valuep})
        else:
            return jsonify({"status" : "error", "message" : "Out of range value"}), 400
    except (TypeError, ValueError):
        return jsonify({"status" : "error" , "message" : "Invalid Value"}), 400

#Server execution
if __name__ == "__main__":
    try:
        app.run(host="0.0.0.0", port=5000)
    finally:
        pwm_motor_1A.stop()
        pwm_motor_2A.stop()
        GPIO.cleanup()